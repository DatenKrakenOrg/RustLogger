name: "rustlogger"
services:
  elastic-lb:
    build:
      context: ./elastic-lb/
      dockerfile: Dockerfile
    container_name: elastic-lb
    depends_on:
      elasticsetup:
        condition: service_completed_successfully
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
      es04:
        condition: service_healthy
    volumes:
      - ./elastic-lb/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - certs:/usr/share/haproxy/certs
    ports:
      - '8404:8404' # Expose elastic-lb stats/healtz page
      - '9200:9200' # Expose elastic-lb for Elasticsearch
    networks:
      - logger-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8404/healthz" ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s

  # elastic-stack
  elasticsetup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.19.0
    container_name: elasicsetup
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    env_file: .env
    networks:
      - logger-network
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es02\n"\
          "    dns:\n"\
          "      - es02\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es03\n"\
          "    dns:\n"\
          "      - es03\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es04\n"\
          "    dns:\n"\
          "      - es04\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120
    user: "0"

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.19.0
    container_name: es01
    depends_on:
      elasticsetup:
        condition: service_healthy
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
      - ./elasticsearch/es01.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    env_file: .env
    #ports:
    #   - ${ES_PORT}:9200
    networks:
      - logger-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -s --cacert config/certs/ca/ca.crt -u \"$ELASTIC_USERNAME:$ELASTIC_PASSWORD\" http://localhost:9200/_cluster/health?wait_for_status=green&timeout=10s && curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials' || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 120
      start_period: 20s
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1

  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.19.0
    container_name: es02
    depends_on:
      elasticsetup:
        condition: service_healthy
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata02:/usr/share/elasticsearch/data
      - ./elasticsearch/es02.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    env_file: .env
    networks:
      - logger-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -s --cacert config/certs/ca/ca.crt -u \"$ELASTIC_USERNAME:$ELASTIC_PASSWORD\" http://localhost:9200/_cluster/health?wait_for_status=green&timeout=10s && curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials' || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 120
      start_period: 20s
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1

  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.19.0
    container_name: es03
    depends_on:
      elasticsetup:
        condition: service_healthy
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata03:/usr/share/elasticsearch/data
      - ./elasticsearch/es03.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    env_file: .env
    networks:
      - logger-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -s --cacert config/certs/ca/ca.crt -u \"$ELASTIC_USERNAME:$ELASTIC_PASSWORD\" http://localhost:9200/_cluster/health?wait_for_status=green&timeout=10s && curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials' || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 120
      start_period: 20s
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1

  es04:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.19.0
    container_name: es04
    depends_on:
      elasticsetup:
        condition: service_healthy
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata04:/usr/share/elasticsearch/data
      - ./elasticsearch/es04.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    env_file: .env
    networks:
      - logger-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -s --cacert config/certs/ca/ca.crt -u \"$ELASTIC_USERNAME:$ELASTIC_PASSWORD\" http://localhost:9200/_cluster/health?wait_for_status=green&timeout=10s && curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials' || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 120
      start_period: 20s
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kibana:
    image: docker.elastic.co/kibana/kibana:8.19.0
    container_name: kibana
    depends_on:
      elastic-lb:
        condition: service_healthy
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    env_file: .env
    ports:
      - '5601:5601'
    networks:
      - logger-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'" ]
      interval: 10s
      timeout: 10s
      retries: 120

  log-forwarding-api-1:
    build:
      context: ../log-forwarding-api
      dockerfile: Dockerfile
    container_name: log-forwarding-api-1
    depends_on:
      elastic-lb:
        condition: service_healthy
    env_file: .env
    networks:
      - logger-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/whoareyou" ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s

  log-forwarding-api-2:
    build:
      context: ../log-forwarding-api
      dockerfile: Dockerfile
    container_name: log-forwarding-api-2
    depends_on:
      log-forwarding-api-1:
        condition: service_healthy
    env_file: .env
    networks:
      - logger-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/whoareyou" ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s

  log-forwarding-api-3:
    build:
      context: ../log-forwarding-api
      dockerfile: Dockerfile
    container_name: log-forwarding-api-3
    depends_on:
      log-forwarding-api-2:
        condition: service_healthy
    env_file: .env
    networks:
      - logger-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/whoareyou" ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s

  # r-proxy-actix
  log-forwarding-lb:
    build:
      context: ./log-forwarding-lb
      dockerfile: Dockerfile
    container_name: log-forwarding-lb
    depends_on:
      log-forwarding-api-3:
        condition: service_healthy
    volumes:
      - ./log-forwarding-lb/nginx.template:/etc/nginx/conf.d/nginx.template
    env_file: .env
    ports:
      - '8080:80'
    networks:
      - logger-network
    command: /bin/ash -c "envsubst '$${SECRET_API_KEY}' < /etc/nginx/conf.d/nginx.template > /etc/nginx/conf.d/default.conf && cat /etc/nginx/conf.d/default.conf && nginx -g' daemon off;'"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl --ipv4 -fsS http://127.0.0.1/health -o /dev/null" ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s

  log-gen:
    build:
      context: ../log-generator/
      dockerfile: Dockerfile
    container_name: log-gen
    volumes:
      - logs:/etc/logs
    networks:
      - logger-network

  log-sender:
    build:
      context: ../log-sender/
      dockerfile: Dockerfile
    depends_on:
      log-forwarding-lb:
        condition: service_healthy
      log-gen:
        condition: service_completed_successfully
    volumes:
      - logs:/etc/logs
    #container_name: log-sender
    env_file: .env
    networks:
      - logger-network

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:8.19.0
    container_name: metricbeat
    depends_on:
      - elastic-lb
    volumes:
      - ./metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
      - certs:/usr/share/metricbeat/certs
    env_file: .env
    networks:
      - logger-network
    restart: unless-stopped

networks:
  logger-network:
    driver: bridge

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  esdata02:
    driver: local
  esdata03:
    driver: local
  esdata04:
    driver: local
  kibanadata:
    driver: local
  logs:
